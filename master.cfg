# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
import slaves
reload(slaves)
c['slaves'] = slaves.slaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9900

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
from buildbotcustom.changes.hgpoller import HgPoller

c['change_source'] = [
    PBChangeSource(),
    HgPoller(hgURL='http://hg.mozilla.org/',
             branch='mozilla-central',
             pollInterval=120),
]

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler

c['schedulers'] = [
   Scheduler(name="onchange", branch="mozilla-central",
              treeStableTimer=2*60,
              builderNames=["spec-parse-builder"])
]

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['slaves'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

f1 = factory.BuildFactory()

def addSlaveMakeTarget(f, target, timeout=1800):
    f.addStep(Compile(command="make -C ../.. %s -w > test.log 2>&1" % target,
                      env={'LANG': 'C'},
                      logfiles={'test': 'test.log'},
                      timeout=timeout))

addSlaveMakeTarget(f1, "normal")

f1.addStep(Mercurial(baseURL='http://hg.mozilla.org/', mode="copy"))

changesetLink = '<a href=http://hg.mozilla.org/mozilla-central/rev/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
f1.addStep(ShellCommand(command=['printf', 'TinderboxPrint:%s\n',
                                 WithProperties(changesetLink)]))

f1.addStep(FileDownload(mastersrc="mozconfig", slavedest=".mozconfig"))

f1.addStep(Compile(command='make -f client.mk -w >build.log 2>&1',
                   env={'LANG': 'C'},
                   logfiles={'build': 'build.log'},
                   timeout=3600))

addSlaveMakeTarget(f1, "fast")
addSlaveMakeTarget(f1, "test")
addSlaveMakeTarget(f1, "medium")
addSlaveMakeTarget(f1, "test")
addSlaveMakeTarget(f1, "slow")
addSlaveMakeTarget(f1, "test", timeout=1800*2)
addSlaveMakeTarget(f1, "normal")

c['builders'] = [{
    'name': 'spec-parse-builder',
    'slavename': "spec-parse",
    'builddir': "spec-parse-full",
    'factory': f1,
}]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8012, authz=authz_cfg))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="mozilla+buildbot@benjamn.com",
                                     extraRecipients=["mozilla@benjamn.com"],
                                     sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"], useSSL=True))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "HTML5 Speculative Parsing Performance Regression Testing"
c['projectURL'] = "http://hg.mozilla.org/mozilla-central"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8012/"
